Given an array of integers, return indices of the two numbers such that they add up to a specific target.


You may assume that each input would have exactly one solution.

Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

UPDATE (2016/2/13):
The return format had been changed to zero-based indices. Please read the above updated description carefully\

问题是要从数组中找到两个数据，使得两数之和等于目标值，输出该两数的下标（从0开始）

(1) for嵌套循环 最笨的方法
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] a = new int[] {};
        for(int i = 0; i < nums.length; i ++) {
            for(int j = i + 1; j < nums.length; j ++) {
                if (nums[i] + nums[j] == target) {
                    a = new int[] {i, j};
                }
            }
        }

        return a;

    }
}
时间复杂度为O(n^2)
(2) HashMap的方法
import java.util.HashMap;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap map = new HashMap();
		int[] res = new int[] {};
        for(int i = 0; i < nums.length; i ++) {
            map.put(nums[i], i);
        }

        for(int j = 0; j < nums.length; j ++) {
			if(map.containsKey(target - nums[j])) {
                int index = Integer.valueOf(map.get(target-nums[j]).toString());
                if(j < index) {
                    res = new int[] {j, index};
                } else if(j > index) {
                    res = new int[] {index, j};
                }
            }
        }
        return res;
    }
}
时间复杂度为 O(2n)

2.1 优化以上代码
import java.util.HashMap;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();

		int[] res = new int[2];
        for(int i = 0; i < nums.length; i ++) {
            if(map.containsKey(target - nums[i])) {
                if(i < map.get(target - nums[i])) {
                    res[1] = i;
                    res[0] = map.get(target - nums[i]);
                } else {
                    res[0] = i;
                    res[1] = map.get(target - nums[i]);
                }
            }

            map.put(nums[i], i);
        }

        return res;

    }
}
时间复杂度为O(n) (抛除map插入数据的过程)
